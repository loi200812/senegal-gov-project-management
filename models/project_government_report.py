# -*- coding: utf-8 -*-
# Part of Odoo. See LICENSE file for full copyright and licensing details.

from odoo import api, fields, models, _

class ProjectGovernmentReport(models.Model):
    _name = 'project.government.report'
    _description = 'Government Project Report'
    _inherit = ['gov.qr.code.mixin', 'mail.thread', 'mail.activity.mixin']
    _order = 'report_date desc, id desc'

    name = fields.Char('Report Title', required=True, tracking=True)
    project_id = fields.Many2one('project.government.project', 
                               string='Project', 
                               required=True, 
                               ondelete='cascade', 
                               tracking=True)
    
    report_date = fields.Date('Report Date', required=True, default=fields.Date.context_today, tracking=True)
    content = fields.Html('Content', tracking=True)
    summary = fields.Text('Executive Summary', tracking=True)
    
    status = fields.Selection([
        ('draft', 'Draft'),
        ('submitted', 'Submitted'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected')
    ], string='Status', default='draft', tracking=True)
    
    report_type = fields.Selection([
        ('weekly', 'Weekly'),
        ('monthly', 'Monthly'),
        ('quarterly', 'Quarterly'),
        ('annual', 'Annual'),
        ('special', 'Special')
    ], string='Report Type', default='monthly', tracking=True)
    
    period_start = fields.Date('Period Start')
    period_end = fields.Date('Period End')
    
    generated_by_id = fields.Many2one('res.users', string='Generated By', 
                                    default=lambda self: self.env.user, 
                                    readonly=True)
    approved_by_id = fields.Many2one('res.users', string='Approved By', tracking=True)
    approval_date = fields.Date('Approval Date', tracking=True)
    
    attachment_ids = fields.Many2many('ir.attachment', 
                                    'report_attachment_rel', 
                                    'report_id', 'attachment_id', 
                                    string='Attachments')
    
    project_progress = fields.Float('Project Progress (%)', related='project_id.progress', store=True)
    project_budget_usage = fields.Float('Budget Usage (%)', related='project_id.budget_utilization', store=True)
    
    key_achievements = fields.Text('Key Achievements', tracking=True)
    challenges = fields.Text('Challenges', tracking=True)
    recommendations = fields.Text('Recommendations', tracking=True)
    next_steps = fields.Text('Next Steps', tracking=True)
    
    active = fields.Boolean(default=True)
    color = fields.Integer('Color Index')
    
    company_id = fields.Many2one('res.company', 
                              related='project_id.company_id', 
                              string='Company', 
                              store=True)
    
    def action_submit(self):
        for report in self:
            report.status = 'submitted'
    
    def action_approve(self):
        for report in self:
            report.status = 'approved'
            report.approved_by_id = self.env.user.id
            report.approval_date = fields.Date.today()
    
    def action_reject(self):
        for report in self:
            report.status = 'rejected'
    
    def action_reset_to_draft(self):
        for report in self:
            report.status = 'draft'
    
    def action_send_by_email(self):
        self.ensure_one()
        template = self.env.ref('senegal_gov_project_management.email_template_project_report', False)
        
        compose_form = self.env.ref('mail.email_compose_message_wizard_form', False)
        ctx = {
            'default_model': 'project.government.report',
            'default_res_id': self.id,
            'default_use_template': bool(template),
            'default_template_id': template.id if template else False,
            'default_composition_mode': 'comment',
            'force_email': True
        }
        return {
            'name': _('Send Report by Email'),
            'type': 'ir.actions.act_window',
            'view_mode': 'form',
            'res_model': 'mail.compose.message',
            'views': [(compose_form.id, 'form')],
            'view_id': compose_form.id,
            'target': 'new',
            'context': ctx,
        }
    
    def action_print_report(self):
        self.ensure_one()
        return self.env.ref('senegal_gov_project_management.action_report_government_project').report_action(self)
    
    @api.onchange('report_type', 'report_date')
    def _onchange_report_type(self):
        if self.report_type and self.report_date:
            # Set period start and end based on report type
            date = self.report_date
            if self.report_type == 'weekly':
                self.period_start = date - fields.Date.relativedelta(date, days=date.weekday())
                self.period_end = self.period_start + fields.Date.relativedelta(days=6)
            elif self.report_type == 'monthly':
                self.period_start = date.replace(day=1)
                self.period_end = date + fields.Date.relativedelta(day=31)
            elif self.report_type == 'quarterly':
                quarter = ((date.month - 1) // 3) + 1
                self.period_start = date.replace(month=((quarter - 1) * 3) + 1, day=1)
                self.period_end = self.period_start + fields.Date.relativedelta(months=3, days=-1)
            elif self.report_type == 'annual':
                self.period_start = date.replace(month=1, day=1)
                self.period_end = date.replace(month=12, day=31)
    
    def _compute_name(self):
        for report in self:
            if not report.name and report.project_id and report.report_type and report.report_date:
                report.name = f"{report.report_type.capitalize()} Report - {report.project_id.name} - {report.report_date}"